#!/usr/bin/env python
# coding: utf-8

# # Lecture 3 - Advanced reporting in R Markdown (and a bit about Jupyter)

# ## Learning Objectives
# 
# By the end of the lecture, students should be able to:
# 
# 
# - Use R Markdown to:
#   - Create table of contents
#   - Create tables and keep table descriptions associated with their tables via `knitr::kable`
#   - Resize figures and keep figure descriptions associated with their figures
#   - Create a references section for citing external sources
#   - Run R Markdown files from the command line
#   - Create parameterized reports and pass parameters to them inside RStudio and at the command line
# - Working with/running Jupyter notebooks non-interactively 

# To learn this, we'll be exploring starting in this demo repo: https://github.com/ttimbers/equine_numbers_value_canada_rmd 
# 
# Which we hope (ðŸ˜…) turns into this end state: https://github.com/ttimbers/equine_numbers_value_canada_parameters
# 
# So please clone/download both repos!

# ## Creating a table of contents in R Markdown
# 
# A table of contents can be automatically generated by specifying `toc: true` in the YAML front matter. It must be indented as so:
# 
# ```
# output: 
#   github_document:
#     toc: true
# ```
# 
# This works for all output file types I have explored so far!

# ## Create tables and keep table descriptions associated with their tables via `knitr::kable`
# 
# Data frames and other rectangular objects in R can be made into nice tables using `knitr::kable`. At the most basic level the syntax is:
# 
# ```knitr::kable(data_frame)```

# To have a table description stay associated with the table, use the `caption` argument. For example:
# 
# ```knitr::kable(data_frame, caption = "Table 1. This is a summary of the data set")```
# 
# A couple notes:
# - If you render to `github_document` or `html_document` you do need to manually write the "Table 1." in your figure caption. If you render to `pdf_document` you do not.
# - Want fancier tables? Use the `kableExtra` package! See docs here: https://cran.r-project.org/web/packages/kableExtra/vignettes/awesome_table_in_html.html

# ## Resize figures and keep figure descriptions associated with their figures
# 
# There are two ways to do this (AFAIK), and you they depend on whether you are creating the figure from an R object vs a file.
# 
# ### 1. Resizing figures and writing figure captions generated from an R plot object
# 
# Here you need to:
# - `fig.width=<WIDTH>, fig.height=<HEIGHT>` in the R code chunk options.
# - `fig.cap = "CAPTION"` in the R code chunk options. 
# 
# Note: `fig.cap = "CAPTION"` + `out.width = '100%'` needs to be used for `github_document` - it's bug I have reported...

# ### 2. Resizing figures and writing figure captions generated from a saved file (e.g., .png) 
# 
# Here you need to:
# - use `knitr::include_graphics(<FILE_PATH>)` inside a code chunk to point the figure file
# - `fig.cap` in the R code chunk options to write the figure caption
# - use `out.width = '40%'` and `out.height = '40%'` in the R code chunk options to set the figure size. Note - currently this **MUST** follow `fig.cap` for the caption to print out (do not ask me why...).

# ## Referencing values from code inside markdown text
# 
# You can refer to values stored in code inside your markdown text using the `r object` surrounded by backticks.
# 
# This is extremely useful for iterating over an analysis near the final stages when you already have the report written, or when doing parameterized reports (more on these in a bit). 
# 
# However, the value you represent must be a vector.

# ## Create a references section for citing external sources
# 
# DO NOT format references by hand, you will drive yourself nuts, especially the more references you collect! Instead use R Markdowns bibliography/citiation functionality. Below is a brief introduction, full docs [here](https://rmarkdown.rstudio.com/authoring_bibliographies_and_citations.html).
# 
# #### Steps to citing in R Markdown
# 1. Add `bibliography: PATH/FILENAME.bib` to the YAML front matter
# 
# 2. At the very end of the `.Rmd` file add `# References`
# 
# 3. Create `PATH/FILENAME.bib` (this is a plain text file) and place citations in there using bibtex citation format (see examples [here](https://www.economics.utoronto.ca/osborne/latex/BIBTEX.HTM)).
# 
# 4. In the `.Rmd` mardown text, use `@label` (corresponds to the first string inside the `{}` in the `.bib` file for the reference of interest) to do a in-text citation.

# #### Getting bibtex citations
# 
# Bibtex citations for code (R & Python programming languages and their respective packages) can be obtained from the sources:
# - `citatation()` function in R (no argument will give you the citation for R, adding a package name as a string to the function call will give you the citation for that package)
# - For Python, I have found I have had to do this somewhat manually from package GitHub repos or docs pages (some packages exist to do this, but none seem to work flawlessly out of box). See my demo `.bib` file here for an example: https://github.com/ttimbers/breast_cancer_predictor/blob/master/doc/breast_cancer_refs.bib
# 
# Bibtex citations for papers can usually be found via Google scholar:
# 
# #### 1. Search for the paper on Google Scholar
# - visit https://scholar.google.com/
# 
# #### 2. Use Goolge Scholar to get the citation
# - Click on the quotation icon under the paper:
# 
# ```{figure} img/google_scholar_step_1.png
# ---
# width: 600px
# name: google_scholar_step_1
# align: left
# ---
# ```
# 
# - Click on the Bibtex link on the pop-up box:
# 
# ```{figure} img/google_scholar_step_2.png
# ---
# width: 600px
# name: google_scholar_step_2
# align: left
# ---
# ```
# 
# - Copy the BibTeX citation to your .bib file
# ```
# @article{ahmad2007k,
#   title={A k-mean clustering algorithm for mixed numeric and categorical data},
#   author={Ahmad, Amir and Dey, Lipika},
#   journal={Data \& Knowledge Engineering},
#   volume={63},
#   number={2},
#   pages={503--527},
#   year={2007},
#   publisher={Elsevier}
# }
# ```

# ## Rendering R Markdown via the "knit" button and via commands
# 
# Inside RStudio, there are two ways to render/knit your R Markdown file. The most obvious is the "Knit" button at the top of RStudio:
# 
# ![alt tag](img/knit_button.png)
# 
# 
# This is handy and useful in a REPL/interactive framework, but there may be other situations where we want to use typed commands to render the document. This can be done via:
# 
# ```
# rmarkdown::render("src/Filename.Rmd")
# ```
# 
# You can pass other arguments to `rmarkdown::render`, some of interest might be:
# - `output_format` - what kind of document to render to (default is what is specified in the YAML, but you can override that here), e.g., "github_document", "pdf_document", "html_document"
# - `params` - a list of named parameters to override their values set in the YAML frontmatter, e.g., `list(data = "data/file.csv", cv = 5)`
# - `output_file` - the name of the output file (especially useful when making parameterized reports so they do not overwrite eachother).

# ### Rendering R Markdown files from the command line
# 
# Similar to an R script, you can call a R Markdown file from the command line/terminal/Git bash. This is done by echoing a command to R:
# 
# ```
# Rscript -e "rmarkdown::render('FILEPATH')"
# ```
# 
# *note - on Windows it is extremely important that you use " instead of ' after -e. You can use single quotes inside the double quotes if more are needed (e.g., Rscript -e "print('hi')")

# ## Parameters with R Markdown
# 
# Insterested in how you can make your R Markdown docs flexible? Not exactly, but kind of more like a script? We can easily do this by using Parameters.
# 
# #### Steps to creating parameterized reports
# 1. Set the paramters you want to use in the YAML front matter with default values, for example:
#   ```
#   params:
#       province: "Alberta"
#   ```
# 2. Access the value for the parameters inside the R Markdown document via `params$PARAMETER_NAME`, for example: `params$province`
# 
# #### How to set parameters in a parameterized report
# 
# There are two ways, either by the "Knit with Parameters" button, or by passing a named list to `rmarkdown::render` using the `params` argument.
# 
# 
# Checkout this overview on parameterized reports: https://rmarkdown.rstudio.com/lesson-6.html

# ## Working with Python in R Markdown
# 
# You can run Python code in an R Markdown by specifying `python` in place of `r` inside the code chunk, for example:
```{python}
import pandas as pd
```
# An example of this can be found here: [python R Markdown demo](https://github.com/ttimbers/python_rmd/blob/main/python_rmd.Rmd)

# Inline python code can also be used inside an R Markdown document using the `reticulate` package. To do this the reticulate library needs to be loaded and then `r py$<OBJECT>` can be used to access the values from the Python environment (e.g., things created in the Python code chunks).
# 
# *Note - similar to R, evaluation Python inline code can only work for printing single element values (e.g., a single number or string)*

# The `py$<OBJECT>` syntax can also be used to pass Python objects, such as single values and data frames, to the R environment inside code chunks. An example of that can be seen [here in the python R Markdown demo](https://github.ubc.ca/MDS-2019-20/DSCI_522_dsci-workflows_students/blob/eafdc9d80ab5940c74e61af378bfe934315b9203/src/testing_python.Rmd#L38).

# ##  Working with/running Jupyter notebooks non-interactively
# 
# Similar to R Markdown, you can work with Jupyter Notebooks in an non-interactive manner. This can give you more power, and make you more efficient for certain tasks (*e.g.,* automated reporting)
# 
# The tool that enables this is `nbconvert`. `nbconvert` allows you to convert `.ipynb` files into other file formats (*e.g.,* HTML, LaTeX, PDF, Markdown, reStructuredText), as well as lets you execute notebooks programmatically.

# ### Using nbconvert to `.ipynb` files into other file formats
# 
# From the command line/terminal/Git Bash to use `nbconvert` to convert a Jupyter notebook (`.ipynb`) to a a different format (*e.g.,* HTML, LaTeX, PDF, Markdown, reStructuredText) use the following commands:
# 
# ```
# jupyter nbconvert --to <output format> <input notebook>
# ```
# 
# where `<output format>` is the desired output format and `<input notebook>` is the filename of the Jupyter notebook.
# 
# Supported formats are listed below, and documentation on how to do each can be found [here](https://nbconvert.readthedocs.io/en/latest/usage.html#supported-output-formats).
# 
# - HTML
# - LaTeX
# - PDF
# - Reveal.js HTML slideshow
# - Markdown
# - reStructuredText
# - executable script
# - notebook

# ### Using `nbconvert` to execute notebooks programmatically
# 
# `nbconvert` can also be used to execute/run notebooks at the command line interface or a via a Python API interface. 
# 
# As an example, a notebook can be executed from the command line with:
# ```
# jupyter nbconvert --to notebook --execute mynotebook.ipynb
# ```
# 
# We will not go into executing/running notebooks from a Python API interface, but it is possible and if you are interested, you can read these [docs](https://nbconvert.readthedocs.io/en/latest/execute_api.html#executing-notebooks-using-the-python-api-interface).

# ### Give it a try!
# 
# 1. Clone this repo: https://github.com/ttimbers/nbconvert_example
# 
# 2. use `jupyter nbconvert --to notebook --execute <input notebook>` to execute the `.ipynb` at the command line and render an executed `.ipynb`.
# 
# 3. use `jupyter nbconvert --to markdown --execute <input notebook>` to execute and the `.ipynb` at the command line and render to markdown.

# #### What about passing arguements or parameters to Jupter notebooks from the command line?
# 
# This is fairly new and exists using a package called `papermill`: https://github.com/nteract/papermill
#     
# Full disclosure, I have yet to test drive this!

# ## What we talked about
# 
# - Rendering R Markdown reports at the console and command line
# - Rendering Jupyter notebooks at the command line

# ## What's next?
# 
# Recording how to run your analysis, and automating this process in driver scripts.
